plot(1:10)
plot(1:10)
plot(1:10)
1+1
2+2
source("~/Desktop/ML/R_Learn/first_r.R")
name <- "Test"
name
age
age <- 30
age <- 30
age
print(x)
for (x in 1:10) {
print(x)
}
class(x)
x <- "This is a string"
class(x)
y <- True
y <- True
y <- TRUE
class(Y)
class(y)
class(x)
class(x)
class(x)
class(x)
class(z)
# integer
z <- 1000
class(z)
max(5,4,6)
min(1,5,0)
sqrt(36)
abs(-9.6)
ceiling(1.4)
floor((1.4))
print(var_str)
var_str <- "This is a string"
print(var_str)
nchar(var_str)
paste(str_1, str_2, sep = ",")
str_1 <- "Hello"
str_2 <- "World"
paste(str_1, str_2, sep = ",")
paste(str_1, str_2, sep = " ,")
paste(str_1, str_2, sep = " , ")
a <- 200
b <- 33
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
fruits <- list("Apple", "Banana", "Cherry")
for (x in fruits) {
print(x)
}
my_function() # call the function named my_function
my_function <- function() {
print("Hello World!")
}
my_function() # call the function named my_function
my_function("Ahmad")
print("Hello World!", name)
my_function("Ahmad")
my_function <- function(name) {
print(name)
}
my_function("Ahmad")
my_function <- function(name) {
print(name, "hi")
}
my_function("Ahmad")
my_function("Ahmad")
print("hi")
print("hi", "hi")
print("hi" +  "hi")
my_function <- function(name) {
paste(name, "hi")
}
my_function("Ahmad")
my_function <- function(name) {
paste("Hi", name)
}
my_function("Ahmad")
# Data Structure
# Date: 16 October 2022 // Lokakuu // October
# Numeric
# Character/String
# Logical TRUE / FALSE
# Integer 1L
var_str <- "This is a string"
var_numeric <- 10.5
var_integer <- 2L
var_complex <- 9i + 3
# A vector is simply a list of items that are of the same type.
fruits_vector <- c("Banana", "Apple", "Orange")
numbers_vector <- c(1,4,9)
number_range_vector <- 1:10
decimal_range_vector <- 1.5:10.5
log_values <- c(TRUE, FALSE, TRUE, FALSE)
# Vector Length
length(fruits_vector)
length(numbers_vector)
sort(number_range_vector)
fruits_vector[1]
fruits_vector[c(1, 3)]
# Change "banana" to "pear"
fruits_vector[1] <- "pear"
numbers <- seq(from = 0, to = 100, by = 20)
numbers <- seq(from = 0, to = 100, by = 20)
numbers
fruits_vector[1]
fruits_vector[c(1, 3)]
length(numbers_vector)
# Vector Length
length(fruits_vector)
log_values <- c(TRUE, FALSE, TRUE, FALSE)
decimal_range_vector <- 1.5:10.5
decimal_range_vector
decimal_range_vector <- 1.5:10.6
decimal_range_vector
# Data Structure
# Date: 16 October 2022 // Lokakuu // October
# Numeric
# Character/String
# Logical TRUE / FALSE
# Integer 1L
var_str <- "This is a string"
var_numeric <- 10.5
var_integer <- 2L
var_complex <- 9i + 3
# A vector is simply a list of items that are of the same type.
fruits_vector <- c("Banana", "Apple", "Orange")
numbers_vector <- c(1,4,9)
number_range_vector <- 1:10
decimal_range_vector <- 1.5:10.6
decimal_range_vector
log_values <- c(TRUE, FALSE, TRUE, FALSE)
# Vector Length
length(fruits_vector)
length(numbers_vector)
sort(number_range_vector)
fruits_vector[1]
fruits_vector[c(1, 3)]
# Change "banana" to "pear"
fruits_vector[1] <- "pear"
numbers <- seq(from = 0, to = 100, by = 20)
numbers
#  Lists  #
list_data <- list(1, 4, 5)
list_data
list_data[1]
length(list_data)
1 %in% thislist # Check 1 in the list
1 %in% list_data # Check 1 in the list
# Data Structure
# Date: 16 October 2022 // Lokakuu // October
# Numeric
# Character/String
# Logical TRUE / FALSE
# Integer 1L
var_str <- "This is a string"
var_numeric <- 10.5
var_integer <- 2L
var_complex <- 9i + 3
# A vector is simply a list of items that are of the same type.
fruits_vector <- c("Banana", "Apple", "Orange")
numbers_vector <- c(1,4,9)
number_range_vector <- 1:10
decimal_range_vector <- 1.5:10.6
decimal_range_vector
log_values <- c(TRUE, FALSE, TRUE, FALSE)
# Vector Length
length(fruits_vector)
length(numbers_vector)
sort(number_range_vector)
fruits_vector[1]
fruits_vector[c(1, 3)]
# Change "banana" to "pear"
fruits_vector[1] <- "pear"
numbers <- seq(from = 0, to = 100, by = 20)
numbers
#  Lists  #
list_data <- list(1, 4, 5)
list_data
list_data[1]
length(list_data)
1 %in% list_data # Check 1 in the list
append(list_data, 8)
append(thislist, 12, after = 2) # Add "orange" to the list after "banana" (index 2):
# Data Structure
# Date: 16 October 2022 // Lokakuu // October
# Matrix : A matrix is a two dimensional data set with columns and rows. A column is a vertical representation of data, while a row is a horizontal representation of data.
thismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)
thismatrix
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
data_matrix[1, 2]
# Concatenation
data_matrix <- matrix(c("apple", "banana", "cherry", "orange"), nrow = 2, ncol = 2)
data_matrix[1, 2]
data_matrix
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
data_matrix[2,]
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
data_matrix[,2]
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
data_matrix[c(1,2),]
data_matrix[c(1,2),]
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
data_matrix[, c(1,2)]
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
"apple" %in% data_matrix # Check Item in the matrix
source("~/Desktop/ML/R_Learn/Data_Structure_Matrix.R")
dim(data_matrix)
length(data_matrix)
# Data Structure
# Date: 16 October 2022 // Lokakuu // October
# Arrays : Compared to matrices, arrays can have more than two dimensions.
thisarray <- c(1:24)
thisarray
multiarray
multiarray <- array(thisarray, dim = c(4, 3, 2))
multiarray
Data_Frame
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other"),
Pulse = c(100, 150, 120),
Duration = c(60, 30, 45)
)
Data_Frame
Data_Frame
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other"),
Pulse = c(100, 150, 120),
Duration = c(60, 30, 45, 0)
)
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other"),
Pulse = c(100, 150, 120),
Duration = c(60, 30, 45)
)
Data_Frame
summary(Data_Frame)
Data_Frame
summary(Data_Frame)
Data_Frame[1]
Data_Frame[["Training"]]
Data_Frame$Training
# Add a new row
New_row_DF <- rbind(Data_Frame, c("Strength", 110, 110))
New_row_DF
length(Data_Frame)
# Print the new column
New_col_DF
# Add a new column
New_col_DF <- cbind(Data_Frame, Steps = c(1000, 6000, 2000))
# Print the new column
New_col_DF
source("~/Desktop/ML/R_Learn/Data_Structure.R")
source("~/Desktop/ML/R_Learn/Data_Structure.R")
music_genre
music_genre <- factor(c("Jazz", "Rock", "Classic", "Classic", "Pop", "Jazz", "Rock", "Jazz"))
music_genre
levels(music_genre)
source("~/Desktop/ML/R_Learn/Data_Structure.R")
length(music_genre)
music_genre[3]
source("~/Desktop/ML/R_Learn/Data_Structure.R")
music_genre[3] <- "Pop"
music_genre[3]
plot(1,2)
plot(2,4)
plot(c(1,2), c(2,4))
plot(c(1,8), c(3,10))
plot(c(1,8), c(3,10))
plot(c(1,8),c(2,5) c(3,10))
plot(c(1,8), c(3,10))
plot(c(1,8), c(3,10))
y <- c(3, 7, 8, 9, 12)
x
x
x <- c(1, 2, 3, 4, 5)
y <- c(3, 7, 8, 9, 12)
y <- c(3, 7, 8, 9, 12)
y
print(y)
print(x)
print(y)
plot(x, y)
plot(1:10)
plot(1:10, type="l")
plot(1:10)
plot(1:10, type="l")
source("~/Desktop/ML/R_Learn/Graph.R")
install.packages("shiny")
install.packages("learnr")
setwd("~/Desktop/ML/R_Learn")
plot(1:10, type="l", col="blue")
plot(x, y)
x <- c(5,7,8,7,2,2,9,4,11,12,9,6)
y <- c(99,86,87,88,111,103,87,94,78,77,85,86)
plot(x, y)
plot(x, y, type="l", col="blue")
x2 <- c(2,2,8,1,15,8,12,9,7,3,11,4,7,14,12)
y2 <- c(100,105,84,105,90,99,90,95,94,100,79,112,91,80,85)
points(x2, y2, col="blue", cex=2)
# Display the pie chart
pie(x)
# Create a vector of pies
x <- c(10,20,30,40)
# Display the pie chart
pie(x)
pie(x, label = mylabel, main = "Fruits")
x <- c(10,20,30,40)
mylabel <- c("Apples", "Bananas", "Cherries", "Dates")
pie(x, label = mylabel, main = "Fruits")
y <- c(4, 5, 8, 16)
barplot(y, names.arg = x)
# Bar Plot
x <- c(1,2,4,8)
y <- c(4, 5, 8, 16)
barplot(y, names.arg = x)
barplot(y,x)
barplot(x,y)
mtcars
mtcars
?mtcars
data(mtcars)
head(mtcars, 6)
data()
data(AirPassengers)
x = data(AirPassengers)
x
iris
data = iris
data
summary(data)
data = women
data
data
data
data
data
length(data)
summary(data)
relation <- lm(weight ~ height)
data = women
data = women
data
print(data$height)
print(data)
plot(women, xlab = "Height (in)", ylab = "Weight (lb)",
main = "women data: American women aged 30-39")
plot(women)
plot(women)
print(data$height)
summary(data$height)
summary(data$weight)
gc()
relation <- lm(y~x)
x = data$height
relation <- lm(y~x)
y = data$weight
relation <- lm(y~x)
relation <- lm(y~x)
print(relation)
print(summary(relation))
plot(data$height, data$weight)
x <- seq(-10, 10, by = .1)
x
x
y <- dnorm(x, mean = 2.5, sd = 0.5)
y
plot(x,y)
x <- seq(-10, 10, by = .5)
x
y <- dnorm(x, mean = 2.5, sd = 0.5)
y
plot(x,y)
x <- seq(-10, 10, by = .5)
y <- dnorm(x, mean = 2.5, sd = 0.5)
plot(x,y)
x <- seq(-10, 10, by = .2)
y <- dnorm(x, mean = 2.5, sd = 0.5)
plot(x,y)
x <- seq(-10, 10, by = .2)
y <- dnorm(x, mean = 4.5, sd = 0.5)
plot(x,y)
x <- seq(-10, 10, by = .2)
y <- dnorm(x, mean = 1.5, sd = 0.5)
plot(x,y)
x <- seq(1, 1, by = .2)
y <- dnorm(x, mean = 0.5, sd = 0.5)
plot(x,y)
x <- seq(10, 20, by = .2)
y <- dnorm(x, mean = 0.5, sd = 0.5)
plot(x,y)
x <- seq(-10, 20, by = .2)
y <- dnorm(x, mean = 0.5, sd = 0.5)
plot(x,y)
bird
boxplot(data$height)
boxplot(data$weight)
boxplot(data$weight)
boxplot(data$height)
boxplot(data)
boxplot(data)
hist(data$height)
hist(data$weight)
x
x
t.test(x,y)
library(caTools)
